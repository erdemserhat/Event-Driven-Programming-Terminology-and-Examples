//Main Function
fun main (args:Array<String>){

    //This is a statements
    var a:String?="Example Sentence"

    //This is a expression
    //They can return any type of value, but they have to return something
    if(a.length>10) 10 else 25

    //This is a statement as well
    //So, expressions are part of statements
     var b:Int?= if(a.length>10) 10 else 25

    //This is a condition
    4>1
    //Specifically, returns boolean values
    //So every condition is supposed to be expressions

    /**
     * Events are;
     * executed by program
     * triggered by user's action
     * causes an action or set of action;
     *
     */






    //Condition, Expression and State...

    /**
     * In programming, we often use three fundamental concepts: Statements, Expressions, and Conditions.
     * Each of these plays a unique role in our code and is essential to understanding program flow and logic.
     *
     * Statement:
     * A statement is a line of code that represents a specific action or event in a program. It is a fundamental
     * building block of your code. For example:
     *
     *   var a: Int = 5
     *
     * In this example, the line "var a: Int = 5" is a statement that declares a variable 'a' and assigns it the value 5.
     *
     * Expression:
     * An expression is an instruction that the compiler can evaluate and return a value of any data type. Expressions are
     * the core elements of many programming operations and can be used in various contexts. For example:
     *
     *   val result = if (number1 > number2) "X" else "Y"
     *
     * Here, the expression "if (number1 > number2) "X" else "Y"" evaluates to a string value either "X" or "Y" based on the
     * condition.
     *
     * Condition:
     * A condition is a specific type of expression that returns a boolean value, i.e., true or false. Conditions are used
     * for decision-making and control flow in your code. It helps you determine which path your program should take. For example:
     *
     *   val isGreaterThan = number1 > number2
     *
     * In this example, "number1 > number2" is a condition that checks if 'number1' is greater than 'number2' and returns a boolean
     * value indicating the result of this comparison.
     *
     * It's important to note that every condition is an expression because it returns a value (true or false), and every expression
     * is a kind of statement because it represents an action or operation in your code.
     */


    /**
     * Action and event are two related but distinct concepts in the context of programming and system design:
     *
     * 1. Action:
     *    - An action refers to a specific operation or task that is performed in response to a certain condition or trigger.
     *    - Actions are often associated with a command or function that executes a particular set of instructions.
     *    - Actions can be intentional and initiated by a user or automated as part of a program's logic.
     *
     * 2. Event:
     *    - An event is a trigger or occurrence that happens in a system or program, often as a response to external stimuli or internal changes.
     *    - Events can be generated by various sources, such as user interactions (e.g., mouse clicks), hardware events (e.g., a button press), or system-related activities (e.g., a file being modified).
     *    - Events are typically associated with some form of data or information related to the occurrence.
     *
     * In summary, actions are the specific things you do or execute, while events are occurrences
     * or triggers that can lead to actions. In software development, events often lead to actions,
     * where event handlers or event-driven programming is used to respond to events with specific
     * actions or functions.
     *
     */


    /**
     * It's important to clarify the terminology regarding user interactions, events, and actions
     * in software development:
     *
     * 1. **User Interaction:** User interactions, such as clicking a button or typing, are considered actions.
     * These actions are initiated by the user to interact with a software application.
     *
     * 2. **Event:** Events are typically generated as a result of user interactions or other external factors.
     * For instance, when a user clicks a button, a click event is generated in response to the user's action.
     *
     * 3. **Actions Triggered by an Event:** Once an event is generated, it can trigger a set of predefined actions.
     * These actions are usually defined in the program to respond to the specific event. Therefore,
     * the flow can be described as follows: user actions lead to events, and events, in turn,
     * trigger a set of defined actions.
     *
     * In summary, user actions can lead to events, and events can trigger actions in a software application.
     * This concept is fundamental in event-driven programming and user interface design.
     *
     */








}